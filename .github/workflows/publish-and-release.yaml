#
# Copyright (c) 2021 - for information on the respective copyright owner
# see the NOTICE file and/or the repository https://github.com/carbynestack/ephemeral.
#
# SPDX-License-Identifier: Apache-2.0
#
name: Publish and release
on:
  workflow_run:
    workflows: ["Build and test artifacts"]
    branches:
      - master
    types:
      - completed
  workflow_dispatch:

jobs:
  prepare:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-20.04
    outputs:
      VERSION: "${{ steps.maven-project.outputs.version }}-${{ github.run_id }}-${{ github.run_number }}-${{ steps.short-sha.outputs.sha }}"
    steps:
      - name: Parse short sha
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
      - uses: actions/checkout@v2
      - name: Get Maven project version
        run: echo ::set-output name=version::$(cat ephemeral-java-client/pom.xml| grep -m 1 -E "<version>(.*)</version>" | sed 's/.*<.*>\(.*\)<\/.*>/\1/g')
        id: maven-project
  draft-release:
    runs-on: ubuntu-20.04
    needs: [prepare]
    env:
      VERSION: "${{ needs.prepare.outputs.VERSION }}"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Retrieve license obligation resources
        run: |
          find . -regex '.*3RD-PARTY-LICENSES' -type d -not -regex '.*target.*' | \
          awk '{split($0,a,"3RD-PARTY-LICENSES"); system("cd " $0 " && find . -type d -maxdepth 1 -not -path . | zip -r@ \"$(cat module.name)-3rd-party-copyrights\" && cd -")}'
          find . -iname origin.src -regex '.*3RD-PARTY-LICENSES.*' -not -regex '.*target.*' | \
          awk '{ \
          split($0,a,"3RD-PARTY-LICENSES"); \
          split(a[2],b,"/"); \
          system("xargs < " $0 " curl --create-dirs -Lo " a[1] "/3RD-PARTY-LICENSES/sources/" b[2] ".zip " $2)}' && \
          find -regex '.*3RD-PARTY-LICENSES/sources$' | awk '{system("zip -jr " $0 "/../$(cat "$0"/../module.name)-3rd-party-sources.zip " $0)}'
          mkdir -p license-obligations && mv `find . -name "*-3rd-party-*.zip"` license-obligations/
      - name: Generate change log
        run: |
          chmod +x .github/scripts/generate-changelog.sh
          GITHUB_WORKSPACE=${GITHUB_WORKSPACE}/ephemeral-java-client ./.github/scripts/generate-changelog.sh
      - name: Create release tag
        run: |
          git tag ${{ env.VERSION }}
          git push --tags
      - name: Create draft
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.VERSION }}
          draft: true
          bodyFile: /tmp/cs.repository-changelog.${{ env.VERSION }}
          artifacts: "license-obligations/*"
  publish-java:
    runs-on: ubuntu-20.04
    needs: [prepare,draft-release]
    env:
      VERSION: "${{ needs.prepare.outputs.VERSION }}"
    defaults:
      run:
        working-directory: ephemeral-java-client
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: 'maven'
      - name: Setting up Github Package Repository as Maven Repository
        uses: s4u/maven-settings-action@v2
        with:
          githubServer: false
          servers: |
            [{
              "id": "github",
              "username": "${{ secrets.GHPR_USERNAME }}",
              "password": "${{ secrets.GHPR_TOKEN }}"
            }]
      - name: Update Maven project version
        run: mvn versions:set -DnewVersion=${{ env.VERSION }} -DprocessAllModules -DgenerateBackupPoms=false
      - name: Publish version to GitHub Packages
        run: mvn deploy -Dskip.tests --batch-mode --no-transfer-progress
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  publish-go:
    runs-on: ubuntu-20.04
    needs: [prepare,draft-release]
    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: on
      REGISTRY: ghcr.io
      VERSION: "${{ needs.prepare.outputs.VERSION }}"
    defaults:
      run:
        working-directory: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.15'
      - name: Setup Build Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup Ko
        uses: imjasonh/setup-ko@v0.6
      - name: Publish Docker Images
        run: |
          ko publish -B --tags=${{ env.VERSION }} \
            github.com/carbynestack/ephemeral/cmd/discovery \
            github.com/carbynestack/ephemeral/cmd/ephemeral \
            github.com/carbynestack/ephemeral/cmd/network-controller
      - name: Configure Helm Chart
        run: |
          sed -i 's/version: \(.*\)/version: \1-${{ env.VERSION }}/g' charts/ephemeral/Chart.yaml
          sed -i 's/tag: latest/tag: ${{ env.VERSION }}/g' charts/ephemeral/values.yaml
      - name: Push Helm Chart
        uses: appany/helm-oci-chart-releaser@v0.3.0
        with:
          name: ephemeral
          repository: carbynestack
          tag: ${{ env.VERSION }}
          path: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}/charts/ephemeral
          registry: ghcr.io
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
  publish-release:
    runs-on: ubuntu-20.04
    needs: [prepare,draft-release,publish-java,publish-go]
    env:
      VERSION: "${{ needs.prepare.outputs.VERSION }}"
    steps:
      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.VERSION }}
          allowUpdates: true
          draft: false
          omitBodyDuringUpdate: true
